Q.1) Write python program to solve 8 puzzle problem using A* algorithm 



import heapq
import itertools

# Define the goal state
goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)

# Define the heuristic function (Manhattan distance)
def heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i * 3 + j]
            if value != 0:
                goal_row, goal_col = divmod(value - 1, 3)
                distance += abs(i - goal_row) + abs(j - goal_col)
    return distance

# Define the A* search algorithm
def astar(initial_state):
    count = itertools.count()
    heap = [(heuristic(initial_state), next(count), initial_state, "")]
    visited_states = set()

    while heap:
        _, _, current_state, path = heapq.heappop(heap)

        if current_state == goal_state:
            return path

        if current_state in visited_states:
            continue

        visited_states.add(current_state)

        zero_index = current_state.index(0)
        row, col = divmod(zero_index, 3)

        for move in ((0, 1), (1, 0), (0, -1), (-1, 0)):
            new_row, new_col = row + move[0], col + move[1]

            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_index = new_row * 3 + new_col
                new_state = list(current_state)
                new_state[zero_index], new_state[new_index] = new_state[new_index], new_state[zero_index]

                heapq.heappush(heap, (heuristic(new_state) + len(path), next(count), tuple(new_state), path + str(new_state[zero_index])))

    return "No solution found."

# Example usage
initial_state = (1, 0, 3, 4, 2, 5, 7, 8, 6)
solution_path = astar(initial_state)

print("Initial State:")
print(initial_state)
print("\nSolution Path:")
print(solution_path)


Q.2) Write a Python program to solve water jug problem. 2 jugs with capacity 5 gallon and 7 gallon are given with unlimited water supply respectively. The target to achieve is 4 gallon of water in 
second jug.

def water_jug_dfs(current_state, visited_states):
    jug1, jug2 = current_state

    if jug1 == 0 and jug2 == 4:
        return [current_state]

    visited_states.add(current_state)
    successors = []

    # Fill jug1
    if jug1 < 5 and (5, jug2) not in visited_states:
        successors.extend(water_jug_dfs((5, jug2), visited_states))

    # Fill jug2
    if jug2 < 7 and (jug1, 7) not in visited_states:
        successors.extend(water_jug_dfs((jug1, 7), visited_states))

    # Pour from jug1 to jug2
    pour_amount = min(jug1, 7 - jug2)
    if pour_amount > 0 and (jug1 - pour_amount, jug2 + pour_amount) not in visited_states:
        successors.extend(water_jug_dfs((jug1 - pour_amount, jug2 + pour_amount), visited_states))

    # Pour from jug2 to jug1
    pour_amount = min(jug2, 5 - jug1)
    if pour_amount > 0 and (jug1 + pour_amount, jug2 - pour_amount) not in visited_states:
        successors.extend(water_jug_dfs((jug1 + pour_amount, jug2 - pour_amount), visited_states))

    return [current_state] + successors

def solve_water_jug_problem():
    initial_state = (0, 0)
    visited_states = set()

    solution_path = water_jug_dfs(initial_state, visited_states)

    if solution_path[-1] == (0, 4):
        print("Solution found:")
        for state in solution_path:
            print(f"Jug 1: {state[0]} gallons, Jug 2: {state[1]} gallons")
    else:
        print("No solution found.")

if __name__ == "__main__":
    solve_water_jug_problem()
