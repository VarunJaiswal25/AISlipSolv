Q.1)Write a program to implement Hangman game using python. [10 Marks]
Description:
Hangman is a classic word-guessing game. The user should guess the word correctly by
entering alphabets of the user choice. The Program will get input as single alphabet from the
user and it will matchmaking with the alphabets in the original


import random

def choose_word():
    words = ["python", "hangman", "programming", "computer", "developer", "coding"]
    return random.choice(words)

def display_word(word, guessed_letters):
    display = ""
    for letter in word:
        if letter in guessed_letters:
            display += letter
        else:
            display += "_"
    return display

def hangman():
    word_to_guess = choose_word()
    guessed_letters = []
    max_attempts = 6
    attempts = 0

    print("Welcome to Hangman!")
    print(display_word(word_to_guess, guessed_letters))

    while True:
        guess = input("Enter a letter: ").lower()

        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a single letter.")
            continue

        if guess in guessed_letters:
            print("You already guessed that letter. Try again.")
            continue

        guessed_letters.append(guess)

        if guess not in word_to_guess:
            attempts += 1
            print(f"Incorrect! Attempts remaining: {max_attempts - attempts}")

        print(display_word(word_to_guess, guessed_letters))

        if "_" not in display_word(word_to_guess, guessed_letters):
            print("Congratulations! You guessed the word.")
            break

        if attempts == max_attempts:
            print("Sorry, you ran out of attempts. The word was:", word_to_guess)
            break

if __name__ == "__main__":
    hangman()



Q.2) Write a Python program to implement Breadth First Search algorithm. Refer the following 
graph as an Input for the program.[Initial node=1,Goal node=8] 


from collections import deque

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbor):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append(neighbor)

def bfs(graph, start, goal):
    queue = deque([(start, [start])])

    while queue:
        current_node, path = queue.popleft()

        if current_node == goal:
            return path

        if current_node in graph:
            for neighbor in graph[current_node]:
                if neighbor not in path:
                    queue.append((neighbor, path + [neighbor]))

    return None

# Example graph
example_graph = Graph()
example_graph.add_edge(1, 2)
example_graph.add_edge(1, 3)
example_graph.add_edge(2, 4)
example_graph.add_edge(2, 5)
example_graph.add_edge(3, 6)
example_graph.add_edge(3, 7)
example_graph.add_edge(4, 8)

# Define initial and goal nodes
initial_node = 1
goal_node = 8

# Find path using BFS
result_path = bfs(example_graph.graph, initial_node, goal_node)

# Print the result
if result_path:
    print(f"Path from {initial_node} to {goal_node}: {result_path}")
else:
    print(f"No path found from {initial_node} to {goal_node}")
