Q1 Write a python program to generate Calendar for the given month and year?.import calendar

def generate_calendar(year, month):
    cal = calendar.monthcalendar(year, month)

    # Print the header
    print(calendar.month_name[month], year)
    print("Mo Tu We Th Fr Sa Su")

    # Print the calendar
    for week in cal:
        for day in week:
            if day == 0:
                print("   ", end=" ")
            else:
                print(f"{day:2d} ", end=" ")
        print()

# Input: Year and Month
year = int(input("Enter the year: "))
month = int(input("Enter the month (1-12): "))

# Generate and print the calendar
generate_calendar(year, month)




Q2 Write a Python program to implement Depth First Search algorithm. Refer the following graph 
as an Input for the program.[Initial node=1,Goal node=7]


class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbor):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append(neighbor)

def dfs(graph, start, goal, path=[]):
    path = path + [start]

    if start == goal:
        return path

    if start not in graph:
        return None

    for neighbor in graph[start]:
        if neighbor not in path:
            new_path = dfs(graph, neighbor, goal, path)
            if new_path:
                return new_path

    return None

# Example graph
example_graph = Graph()
example_graph.add_edge(1, 2)
example_graph.add_edge(1, 3)
example_graph.add_edge(2, 4)
example_graph.add_edge(2, 5)
example_graph.add_edge(3, 6)
example_graph.add_edge(3, 7)

# Define initial and goal nodes
initial_node = 1
goal_node = 7

# Find path using DFS
result_path = dfs(example_graph.graph, initial_node, goal_node)

# Print the result
if result_path:
    print(f"Path from {initial_node} to {goal_node}: {result_path}")
else:
    print(f"No path found from {initial_node} to {goal_node}")

