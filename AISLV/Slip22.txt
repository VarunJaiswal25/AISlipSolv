Q.1) Write a Program to Implement Alpha-Beta Pruning using Python

class TicTacToe:
    def __init__(self):
        self.board = [' '] * 9
        self.current_player = 'X'
        
    def display_board(self):
        for i in range(0, 9, 3):
            print('|'.join(self.board[i:i+3]))
            if i < 6:
                print("-----")

    def is_winner(self, player):
        # Check rows
        for i in range(0, 9, 3):
            if all(self.board[j] == player for j in range(i, i + 3)):
                return True

        # Check columns
        for i in range(3):
            if all(self.board[j] == player for j in range(i, 9, 3)):
                return True

        # Check diagonals
        if all(self.board[i] == player for i in [0, 4, 8]) or all(self.board[i] == player for i in [2, 4, 6]):
            return True

        return False

    def is_board_full(self):
        return ' ' not in self.board

    def is_game_over(self):
        return self.is_winner('X') or self.is_winner('O') or self.is_board_full()

    def get_available_moves(self):
        return [i for i in range(9) if self.board[i] == ' ']

    def make_move(self, move):
        self.board[move] = self.current_player
        self.current_player = 'O' if self.current_player == 'X' else 'X'

    def undo_move(self, move):
        self.board[move] = ' '
        self.current_player = 'O' if self.current_player == 'X' else 'X'


def minimax(board, depth, maximizing_player, alpha, beta):
    if board.is_winner('X'):
        return -1
    if board.is_winner('O'):
        return 1
    if board.is_board_full():
        return 0

    if maximizing_player:
        max_eval = float('-inf')
        for move in board.get_available_moves():
            board.make_move(move)
            eval = minimax(board, depth + 1, False, alpha, beta)
            board.undo_move(move)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for move in board.get_available_moves():
            board.make_move(move)
            eval = minimax(board, depth + 1, True, alpha, beta)
            board.undo_move(move)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval


def find_best_move(board):
    best_val = float('-inf')
    best_move = -1

    for move in board.get_available_moves():
        board.make_move(move)
        move_val = minimax(board, 0, False, float('-inf'), float('inf'))
        board.undo_move(move)

        if move_val > best_val:
            best_move = move
            best_val = move_val

    return best_move


if __name__ == "__main__":
    game = TicTacToe()

    while not game.is_game_over():
        game.display_board()

        if game.current_player == 'X':
            move = int(input("Enter your move (0-8): "))
            if move not in game.get_available_moves():
                print("Invalid move. Try again.")
                continue
        else:
            move = find_best_move(game)

        game.make_move(move)

    game.display_board()

    if game.is_winner('X'):
        print("You win!")
    elif game.is_winner('O'):
        print("AI wins!")
    else:
        print("It's a draw!")





Q.2) Write a Python program to implement Simple Chatbot



from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer

# Create a chatbot instance
chatbot = ChatBot('SimpleBot')

# Create a new trainer for the chatbot
trainer = ChatterBotCorpusTrainer(chatbot)

# Train the chatbot on English language data
trainer.train('chatterbot.corpus.english')

# Main loop
print("SimpleBot: Hello! I'm a simple chatbot. Type 'exit' to end the conversation.")
while True:
    user_input = input("You: ")

    # Exit the chatbot if the user types 'exit'
    if user_input.lower() == 'exit':
        print("SimpleBot: Goodbye!")
        break

    # Get a response from the chatbot
    bot_response = chatbot.get_response(user_input)

    print("SimpleBot:", bot_response)

