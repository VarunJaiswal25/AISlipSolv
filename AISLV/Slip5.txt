Q.1) Write a python program to implement Lemmatization using NLTK

import nltk
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize

nltk.download('punkt')
nltk.download('wordnet')

def lemmatize_text(text):
    lemmatizer = WordNetLemmatizer()
    tokens = word_tokenize(text)
    lemmatized_tokens = [lemmatizer.lemmatize(token) for token in tokens]
    lemmatized_text = ' '.join(lemmatized_tokens)
    return lemmatized_text

# Example usage
input_text = "The cats are running and the mice are hiding"
lemmatized_text = lemmatize_text(input_text)

print("Original Text:", input_text)
print("Lemmatized Text:", lemmatized_text)




Q.2) Write a Python program to implement Breadth First Search algorithm. Refer the following 
graph as an Input for the program.[Initial node=1,Goal node=8]


from collections import deque

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbor):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append(neighbor)

def bfs(graph, start, goal):
    queue = deque([(start, [start])])
    visited = set()

    while queue:
        current_node, path = queue.popleft()

        if current_node == goal:
            return path

        if current_node not in visited:
            visited.add(current_node)

            if current_node in graph:
                for neighbor in graph[current_node]:
                    if neighbor not in visited:
                        queue.append((neighbor, path + [neighbor]))

    return None

# Example graph
example_graph = Graph()
example_graph.add_edge(1, 2)
example_graph.add_edge(1, 3)
example_graph.add_edge(2, 4)
example_graph.add_edge(2, 5)
example_graph.add_edge(3, 6)
example_graph.add_edge(3, 7)
example_graph.add_edge(4, 8)

# Define initial and goal nodes
initial_node = 1
goal_node = 8

# Find path using BFS
result_path = bfs(example_graph.graph, initial_node, goal_node)

# Print the result
if result_path:
    print(f"Path from {initial_node} to {goal_node}: {result_path}")
else:
    print(f"No path found from {initial_node} to {goal_node}")

