Q1 Python program that demonstrates the hill climbing algorithm to find the maximum of a 
mathematical function.(For example f(x) = -x^2 + 4x)

import numpy as np

# Define the mathematical function
def objective_function(x):
    return -x**2 + 4*x

# Hill climbing algorithm
def hill_climbing(initial_x, step_size, num_steps):
    current_x = initial_x

    for step in range(num_steps):
        current_value = objective_function(current_x)
        next_x = current_x + step_size
        next_value = objective_function(next_x)

        # Check if the next value is greater than the current value
        if next_value > current_value:
            current_x = next_x
        else:
            break

    return current_x, objective_function(current_x)

# Set initial parameters
initial_x = 0.0
step_size = 0.1
num_steps = 100

# Run hill climbing algorithm
max_x, max_value = hill_climbing(initial_x, step_size, num_steps)

# Print the result
print(f"Maximum value found at x = {max_x}, f(x) = {max_value}")




Q2 Write a Python program to implement Depth First Search algorithm. Refer the following graph 
as an Input for the program. [Initial node=1,Goal node=8] 



class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbor):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append(neighbor)

def dfs(graph, start, goal, path=[]):
    path = path + [start]

    if start == goal:
        return path

    if start not in graph:
        return None

    for neighbor in graph[start]:
        if neighbor not in path:
            new_path = dfs(graph, neighbor, goal, path)
            if new_path:
                return new_path

    return None

# Example graph
example_graph = Graph()
example_graph.add_edge(1, 2)
example_graph.add_edge(1, 3)
example_graph.add_edge(2, 4)
example_graph.add_edge(2, 5)
example_graph.add_edge(3, 6)
example_graph.add_edge(3, 7)
example_graph.add_edge(4, 8)

# Define initial and goal nodes
initial_node = 1
goal_node = 8

# Find path using DFS
result_path = dfs(example_graph.graph, initial_node, goal_node)

# Print the result
if result_path:
    print(f"Path from {initial_node} to {goal_node}: {result_path}")
else:
    print(f"No path found from {initial_node} to {goal_node}")

